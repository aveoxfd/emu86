#ifndef MICROCODE_H
#define MICROCODE_H

#include "types.h"

typedef enum {
    ALU_NOP,
    ALU_ADD,
    ALU_SUB, 
    ALU_AND,
    ALU_OR,
    ALU_XOR,
    ALU_MOV
}AluOperation;

typedef enum {
    OP_NONE,
    OP_REG,
    OP_MEM,
    OP_IMM,
    OP_REG_INDIRECT
}OperandType;

typedef enum {
    REG_AL = 0, REG_AH = 0, REG_AX = 0,
    REG_CL = 1, REG_CH = 1, REG_CX = 1,
    REG_DL = 2, REG_DH = 2, REG_DX = 2,
    REG_BL = 3, REG_BH = 3, REG_BX = 3,
    REG_SP = 4,
    REG_BP = 5, 
    REG_SI = 6,
    REG_DI = 7
}GeneralRegisterIndex;

typedef struct {
    // ALU management
    uint_8 alu_op;           //Operation ALU
    uint_8 alu_src_a;        //Source A for ALU
    uint_8 alu_src_b;        //Source B for ALU  
    uint_8 alu_dest;         //Assigning the result to the ALU
    uint_8 alu_flags_update; //Updating flags

    // Data bus management
    uint_8 data_bus_src;     //Data bus source
    uint_8 data_bus_dest;    //Receiver from the data bus

    // Address bus management
    uint_8 addr_bus_src;     //Address source
    uint_8 mem_read;         //Reading memory
    uint_8 mem_write;        //Writing to memory
    
    // register managment
    uint_8 reg_write_enable; // Register entry permission
    uint_8 reg_read_enable;  // Register reading permission
    
    // sequence management
    uint_8 next_addr_sel;    // Choosing the next address
    uint_8 cond_jump;        // Conditional transition
} MicroInstruction;

extern const MicroInstruction *MICROCODE_ROM[256];

#endif