#ifndef CPU_H
#define CPU_H

#include "types.h"

#define PREFETCH_QUEUE_SIZE_MACRO 6
#define PREFIX_CS_MACRO 0x2E
#define PREFIX_DS_MACRO 0x3E
#define PREFIX_ES_MACRO 0x26
#define PREFIX_SS_MACRO 0x36

//0b0000000000000000
#define CARRY_FLAG              0b0000000000000001
#define PARITY_FLAG             0b0000000000000100
#define AUXILIARY_CARRY_FLAG    0b0000000000010000
#define ZERO_FLAG               0b0000000001000000
#define SIGN_FLAG               0b0000000010000000
#define TRAP_FLAG               0b0000000100000000
#define INTERRUPT_FLAG          0b0000001000000000
#define DIRECTION_FLAG          0b0000010000000000
#define OVERFLOW_FLAG           0b0000100000000000

typedef enum{
    CS,
    DS,
    ES,
    SS,
    SR_COUNT
}Segment_registers;
typedef enum{
    AX, 
    CX, 
    DX, 
    BX, 
    SP, 
    BP, 
    SI, 
    DI,
    GPR_COUNT
}General_purpose_registers;
typedef enum{
    IP,
    FLAGS,
    S_COUNT,
}System_registers;

typedef struct CPU{
    uint_16 general_purpose_registers[GPR_COUNT];   //ax, cx, dx, bx, sp, bp, si, di
    uint_16 segments_registers[SR_COUNT];           //cs, ds, es, ss
    uint_16 system_registers[S_COUNT];              //ip, flags

    uint_8  prefetch_queue[PREFETCH_QUEUE_SIZE_MACRO];  // FF FF FF FF FF FF FF FF
    uint_16 prefetch_head;                              // head pointer
    uint_16 prefetch_count;                             // head + count = end

    struct{
        uint_16 op1, op2, result;
    } alu;                                     

    uint_8  opcode;                                 //opcode shadow register
    uint_8  modrm;                                  //modr/m shadow register
    uint_8  segment;                                //shadow select segment register
    uint_16 disp;                                   //displacement
    uint_16 base;                                   //base
    uint_8  reset;                                  //on start value
}CPU;

void init_cpu(CPU* cpu);
//fetch->decode->execute cycle
void run(CPU* cpu);

#endif